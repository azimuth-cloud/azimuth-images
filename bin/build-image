#!/usr/bin/env bash

set -eo pipefail

REPO_ROOT="$(dirname $(dirname $(realpath ${BASH_SOURCE[0]:-${(%):-%x}})))"
source "$REPO_ROOT/bin/env-vars"

PACKER_VAR_FILES_ARGS=
if [ -n "$PACKER_VAR_FILES" ]; then
    IFS="," read -ra PACKER_VAR_FILES_ARR <<< "$PACKER_VAR_FILES"
    for FILE in "${PACKER_VAR_FILES_ARR[@]}"; do
        if [ -z "$FILE" ]; then continue; fi
        PACKER_VAR_FILES_ARGS="$PACKER_VAR_FILES_ARGS -var-file=$REPO_ROOT/$FILE"
    done
fi

set -x

cleanup() {
  # We want all the cleanup commands to run even if there is an error
  set +e
  # If a floating IP has been allocated, release it
  if [ -n "$PKR_VAR_floating_ip" ]; then
    openstack floating ip delete "$PKR_VAR_floating_ip"
  fi
  # Delete the source image artefacts
  if [ -n "$PKR_VAR_source_image_name" ]; then
    openstack image delete "$PKR_VAR_source_image_name"
    if [ -f "$PKR_VAR_source_image_name.download" ]; then
      rm "$PKR_VAR_source_image_name.download"
    fi
  fi
}
trap cleanup EXIT

# Wait until we are able to allocate a FIP
PKR_VAR_floating_ip=
until \
  PKR_VAR_floating_ip="$(openstack floating ip create -f value -c id "$FLOATING_IP_NETWORK")"
do
  sleep 30
done

PKR_VAR_source_image_name="packer-$(uuidgen | tr '[:upper:]' '[:lower:]')"
curl -Lo "$PKR_VAR_source_image_name.download" "$SOURCE_IMAGE_URL"
openstack image create \
  --progress \
  --private \
  --container-format "${SOURCE_IMAGE_CONTAINER_FORMAT:-bare}" \
  --disk-format "${SOURCE_IMAGE_DISK_FORMAT:-qcow2}" \
  --file "$PKR_VAR_source_image_name.download" \
  $SOURCE_IMAGE_PROPERTIES \
  "$PKR_VAR_source_image_name"

export PACKER_LOG=1 PKR_VAR_floating_ip PKR_VAR_source_image_name
packer build \
  --on-error=cleanup \
  $PACKER_VAR_FILES_ARGS \
  $PACKER_EXTRA_ARGS \
  "$REPO_ROOT/packer/$PACKER_TEMPLATE.pkr.hcl"

if [ -f "./packer-manifest.json" ]; then
  # Download the image that we built and remove it from OpenStack
  IMAGE_ID="$(jq -r '.builds[-1].artifact_id' ./packer-manifest.json)"
  IMAGE_NAME="$(openstack image show -f value -c name $IMAGE_ID)"
  IMAGE_DISK_FORMAT="$(openstack image show -f value -c disk_format $IMAGE_ID)"
  IMAGE_SOURCE_FILE="${IMAGE_NAME}.source.${IMAGE_DISK_FORMAT}"
  openstack image save --file "$IMAGE_SOURCE_FILE" "$IMAGE_ID"
  openstack image delete "$IMAGE_ID"

  # Output the name, format and filename for the downloaded image, and the manifest extra
  MANIFEST_EXTRA="$(jq -c -r '.builds[-1].custom_data // {}' ./packer-manifest.json)"
  echo "image-name=$IMAGE_NAME" >> "${GITHUB_OUTPUT:-/dev/stdout}"
  echo "image-disk-format=$IMAGE_DISK_FORMAT" >> "${GITHUB_OUTPUT:-/dev/stdout}"
  echo "image-source-file=$IMAGE_SOURCE_FILE" >> "${GITHUB_OUTPUT:-/dev/stdout}"
  echo "manifest-extra=$MANIFEST_EXTRA" >> "${GITHUB_OUTPUT:-/dev/stdout}"
fi
